// This grammar can be compiled to parser.js with the following command:
//
// `lark-js grammar.lark -o ./src/lib/scripts/parser.js`
//
// This command is dependent on lark-js which can be installed via pip and lark
// version 1.1.5 which can also be installed via pip
//
// lark-js creates parser.js to be a node module. The resulting file requires
// the following edits.
//
// 1. `function get_parser` -> `export function get_parser`
// 2. `class Transformer` -> `export class Transformer`
// 3. Delete the entire module.exports section

start: [(key | pair) ((AND | OR) (key | pair))*]

pair: pair_single
    | pair_group

pair_single: key ":" value
pair_group: "(" [pair ((AND | OR) pair)*] ")"

key: KEY_COMPONENT (KEY_SEP KEY_COMPONENT)*

KEY_SEP: "."
KEY_COMPONENT: /([\w\d\_\-]+(\\\.)*)+/

value: STRING
    | NUMBER
    | TRUE
    | FALSE
    | NULL
    | value_group

value_group: "(" value [((AND | OR) value)*] ")"

STRING: /\^?"(?:\\.|[^\\])*?"\$?/
START_ANCHOR: "^"
END_ANCHOR: "$"

NUMBER: COMPARISON? SIGNED_NUMBER
COMPARISON: ">"
          | ">="
          | "<"
          | "<="

TRUE: "true"
FALSE: "false"
NULL: "null"

AND: "AND"
OR: "OR"

%import common.SIGNED_NUMBER
%import common.WS
%ignore WS
